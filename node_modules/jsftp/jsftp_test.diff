diff --git a/test/jsftp_test.js b/test/jsftp_test.js
index 3099511..3b2a46d 100755
--- a/test/jsftp_test.js
+++ b/test/jsftp_test.js
@@ -6,17 +6,17 @@
  */
 /*global it describe beforeEach afterEach */
 
-"use strict";
+'use strict';
 
-var assert = require("assert");
-var Fs = require("fs");
+var assert = require('assert');
+var Fs = require('fs');
 var exec = require('child_process').spawn;
-var Ftp = require("../");
-var Path = require("path");
-var sinon = require("sinon");
-var EventEmitter = require("events").EventEmitter;
-var ftpServer = require("ftp-test-server");
-var rimraf = require("rimraf");
+var Ftp = require('../');
+var Path = require('path');
+var sinon = require('sinon');
+var EventEmitter = require('events').EventEmitter;
+var ftpServer = require('ftp-test-server');
+var rimraf = require('rimraf');
 var concat = require('concat-stream');
 
 var dbgServer = require('debug')('jsftp:test:server');
@@ -25,10 +25,10 @@ var dbgServer = require('debug')('jsftp:test:server');
 // FTP server. If you want to test against a remote server, simply change the
 // `host` and `port` properties as well.
 var FTPCredentials = {
-  host: "localhost",
-  user: "user",
+  host: 'localhost',
+  user: 'user',
   port: 3334,
-  pass: "12345"
+  pass: '12345'
 };
 
 function getRemotePath(path) {
@@ -38,11 +38,11 @@ function getRemotePath(path) {
 function getLocalPath(path) {
   return Path.join(process.cwd(), 'test', 'test_c9', path);
 }
-var CWD = process.cwd() + "/test";
-var remoteCWD = "test/test_c9";
-exec('mkdir', [__dirname + "/" + remoteCWD]);
+var CWD = process.cwd() + '/test';
+var remoteCWD = 'test/test_c9';
+exec('mkdir', [__dirname + '/' + remoteCWD]);
 
-describe("jsftp test suite", function() {
+describe('jsftp test suite', function() {
   process.on('uncaughtException', function(err) {
     console.log('Caught exception: ' + err);
     server.stop();
@@ -50,7 +50,7 @@ describe("jsftp test suite", function() {
 
   var ftp, server;
   before(function(done) {
-    if (FTPCredentials.host === "localhost") {
+    if (FTPCredentials.host === 'localhost') {
       server = new ftpServer();
       server.init(FTPCredentials);
 
@@ -92,21 +92,21 @@ describe("jsftp test suite", function() {
 
   after(function() { server.stop(); });
 
-  it("test initialize bad host", function(next) {
+  it('test initialize bad host', function(next) {
     var ftp2 = new Ftp({
-      host: "badhost",
-      user: "user",
+      host: 'badhost',
+      user: 'user',
       port: 21,
-      pass: "12345"
+      pass: '12345'
     });
 
-    ftp2.on("error", function(err) {
+    ftp2.on('error', function(err) {
       assert.equal(err.code, 'ENOTFOUND');
       next();
     });
   });
 
-  it("test initialize", function(next) {
+  it('test initialize', function(next) {
     assert.equal(ftp.host, FTPCredentials.host);
     assert.equal(ftp.port, FTPCredentials.port);
     assert.equal(ftp.user, FTPCredentials.user);
@@ -117,19 +117,19 @@ describe("jsftp test suite", function() {
     next();
   });
 
-  it("test parseResponse with mark", function(next) {
+  it('test parseResponse with mark', function(next) {
     var cb = sinon.spy();
     cb.expectsMark = {
       marks: [150]
     };
     var data = {
       code: 150,
-      text: "150 File status okay; about to open data connection.",
+      text: '150 File status okay; about to open data connection.',
       isMark: true
     };
 
     ftp.commandQueue = [
-      { action:"retr fakefile.txt", callback: cb }
+      { action: 'retr fakefile.txt', callback: cb }
     ];
     ftp.parse = sinon.spy();
 
@@ -139,16 +139,16 @@ describe("jsftp test suite", function() {
     next();
   });
 
-  it("test parseResponse with no mark", function(next) {
+  it('test parseResponse with no mark', function(next) {
     var cb = sinon.spy();
     var data = {
       code: 150,
-      text: "150 File status okay; about to open data connection.",
+      text: '150 File status okay; about to open data connection.',
       isMark: true
     };
 
     ftp.commandQueue = [
-      { action: "retr fakefile.txt", callback: cb }
+      { action: 'retr fakefile.txt', callback: cb }
     ];
     ftp.parse = sinon.spy();
 
@@ -157,18 +157,18 @@ describe("jsftp test suite", function() {
     next();
   });
 
-  it("test send function", function(next) {
+  it('test send function', function(next) {
     ftp.pipeline = {
       write: sinon.spy()
     };
     ftp.send();
-    ftp.send("list /");
+    ftp.send('list /');
     assert.equal(ftp.pipeline.write.callCount, 1);
-    assert(ftp.pipeline.write.calledWithExactly("list /\r\n"));
+    assert(ftp.pipeline.write.calledWithExactly('list /\r\n'));
     next();
   });
 
-  it("test parseResponse with ignore code", function(next) {
+  it('test parseResponse with ignore code', function(next) {
     var cb = sinon.spy();
     cb.expectsMark = {
       marks: [150],
@@ -176,18 +176,18 @@ describe("jsftp test suite", function() {
     };
     var data1 = {
       code: 150,
-      text: "150 File status okay; about to open data connection.",
+      text: '150 File status okay; about to open data connection.',
       isMark: true
     };
     var data2 = {
       code: 226,
-      text: "226 Transfer complete.",
+      text: '226 Transfer complete.',
       isMark: false
     };
 
     ftp.commandQueue = [
-      { action: "retr fakefile.txt", callback: cb },
-      { action: "list /", callback: function() {} }
+      { action: 'retr fakefile.txt', callback: cb },
+      { action: 'list /', callback: function() {} }
     ];
     ftp.parse = sinon.spy();
     ftp.ignoreCmdCode = 150;
@@ -200,7 +200,8 @@ describe("jsftp test suite", function() {
     next();
   });
 
-  it("test invalid password", function(next) {
+  it('test invalid password', function(next) {
+    this.timeout(10000);
     ftp.auth(
       FTPCredentials.user,
       FTPCredentials.pass + '_invalid',
@@ -211,62 +212,62 @@ describe("jsftp test suite", function() {
       });
   });
 
-  it("test getFeatures", function(next) {
+  it('test getFeatures', function(next) {
     ftp.getFeatures(function(err, feats) {
-      assert.ok(Array.isArray(feats));
-      assert.ok(Array.isArray(ftp.features));
-      assert.ok(ftp.system.length > 0);
+      assert(Array.isArray(feats));
+      assert(Array.isArray(ftp.features));
+      assert(ftp.system.length > 0);
 
       var feat = ftp.features[0];
-      assert.ok(ftp.hasFeat(feat));
-      assert.equal(false, ftp.hasFeat("madeup-feat"));
-      assert.equal(false, ftp.hasFeat());
-      assert.equal(false, ftp.hasFeat(null));
-      assert.equal(false, ftp.hasFeat(''));
-      assert.equal(false, ftp.hasFeat(0));
+      assert(ftp.hasFeat(feat));
+      assert.strictEqual(false, ftp.hasFeat('madeup-feat'));
+      assert.strictEqual(false, ftp.hasFeat());
+      assert.strictEqual(false, ftp.hasFeat(null));
+      assert.strictEqual(false, ftp.hasFeat(''));
+      assert.strictEqual(false, ftp.hasFeat(0));
       next();
     });
   });
 
-  it("test print working directory", function(next) {
+  it('test print working directory', function(next) {
     ftp.raw.pwd(function(err, res) {
       assert(!err, err);
 
       var code = parseInt(res.code, 10);
-      assert.ok(code === 257, "PWD command was not successful: " + res.text);
+      assert.strictEqual(code, 257, 'PWD command was not successful: ' + res.text);
 
       next();
     });
   });
 
-  it("test switch CWD", function(next) {
+  it('test switch CWD', function(next) {
     ftp.raw.cwd(remoteCWD, function(err, res) {
       assert.ok(!err, err);
 
       var code = parseInt(res.code, 10);
-      assert.ok(code === 200 || code === 250, "CWD command was not successful");
+      assert.ok(code === 200 || code === 250, 'CWD command was not successful');
 
       ftp.raw.pwd(function(err, res) {
         assert.ok(!err, err);
 
         var code = parseInt(res.code, 10);
-        assert.ok(code === 257, "PWD command was not successful");
-        assert.ok(res.text.indexOf(remoteCWD), "Unexpected CWD");
+        assert.strictEqual(code, 257, 'PWD command was not successful');
+        assert.ok(res.text.indexOf(remoteCWD), 'Unexpected CWD');
         next();
       });
     });
   });
 
-  it("test switch to unexistent CWD", function(next) {
-    ftp.raw.cwd("/unexistentDir/", function(err, res) {
+  it('test switch to unexistent CWD', function(next) {
+    ftp.raw.cwd('/unexistentDir/', function(err, res) {
       var code = parseInt(res.code, 10);
-      assert.ok( !! err);
-      assert.equal(code, 550, "A (wrong) CWD command was successful. It should have failed");
+      assert.ok(!!err);
+      assert.equal(code, 550, 'A (wrong) CWD command was successful. It should have failed');
       next();
     });
   });
 
-  it("test passive listing of current directory", function(next) {
+  it('test passive listing of current directory', function(next) {
     ftp.list(remoteCWD, function(err, res) {
       assert.ok(!err, err);
       assert.ok(res.length > 0);
@@ -274,7 +275,7 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("test passive listing of nonexisting directory", function(next) {
+  it('test passive listing of nonexisting directory', function(next) {
     ftp.list('does-not-exist/', function(err, res) {
       assert.equal(typeof err, 'object');
       assert.ok(err.code === 450 || err.code === 550);
@@ -282,10 +283,10 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("test ftp node stat", function(next) {
+  it('test ftp node stat', function(next) {
     ftp.raw.pwd(function(err, res) {
       var parent = new RegExp('.*"(.*)".*').exec(res.text)[1];
-      var path = Path.resolve(parent + "/" + remoteCWD);
+      var path = Path.resolve(parent + '/' + remoteCWD);
       ftp.raw.stat(path, function(err, res) {
         assert.ok(!err, res);
         assert.ok(res);
@@ -343,9 +344,9 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("test save a remote copy of a local file", function(next) {
+  it('test save a remote copy of a local file', function(next) {
     this.timeout(10000);
-    var filePath = getRemotePath("file_ftp_test.txt");
+    var filePath = getRemotePath('file_ftp_test.txt');
     var onProgress = sinon.spy();
     ftp.on('progress', onProgress);
     ftp.put(__filename, filePath, function(err, res) {
@@ -357,7 +358,8 @@ describe("jsftp test suite", function() {
         var data = onProgress.args[0][0];
         assert.equal(data.filename, filePath);
         assert.equal(data.action, 'put');
-        assert.ok(typeof data.transferred, 'number');
+        assert.strictEqual(typeof data.total, 'number');
+        assert.strictEqual(typeof data.transferred, 'number');
 
         ftp.raw.dele(filePath, function(err, data) {
           assert.ok(!err);
@@ -367,9 +369,9 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("test passing a dir instead of file path to put should callback with error", function (next) {
-      var localUploadPath = ".";
-      var remoteFileName  = "directory_file_upload_should_fail.txt";
+  it('test passing a dir instead of file path to put should callback with error', function (next) {
+      var localUploadPath = '.';
+      var remoteFileName  = 'directory_file_upload_should_fail.txt';
 
       ftp.put(localUploadPath, remoteFileName, function(hadError) {
           assert.ok(hadError);
@@ -377,16 +379,17 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("test streaming put", function(next) {
+  it.only('test streaming put', function(next) {
     var readStream = Fs.createReadStream(__filename);
-    var remoteFileName = "file_ftp_test.txt";
+    var remoteFileName = 'file_ftp_test.txt';
     var filePath = getRemotePath(remoteFileName);
     ftp.put(readStream, filePath, function(hadError) {
       assert.ok(!hadError);
 
       ftp.ls(filePath, function(err, res) {
         assert.ok(!err);
-        assert.equal(res[0].size, Fs.statSync(CWD + "/jsftp_test.js").size);
+        console.log(res[0]);
+        assert.equal(res[0].size, Fs.statSync(CWD + '/jsftp_test.js').size);
 
         ftp.raw.dele(filePath, function(err, data) {
           assert.ok(!err);
@@ -397,12 +400,12 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("test rename a file", function(next) {
-    var from = getRemotePath("file_ftp_test.txt");
-    var to = getRemotePath("file_ftp_test_renamed.txt");
-    Fs.readFile(__filename, "binary", function(err, data) {
+  it('test rename a file', function(next) {
+    var from = getRemotePath('file_ftp_test.txt');
+    var to = getRemotePath('file_ftp_test_renamed.txt');
+    Fs.readFile(__filename, 'binary', function(err, data) {
       assert.ok(!err, err);
-      var buffer = new Buffer(data, "binary");
+      var buffer = new Buffer(data, 'binary');
       ftp.put(buffer, from, function(err, res) {
         assert.ok(!err, err);
 
@@ -422,18 +425,18 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("test get a file", function(next) {
+  it('test get a file', function(next) {
     var localPath = CWD + '/test_c9/testfile.txt';
-    var remotePath = remoteCWD + "/testfile.txt";
-    var realContents = Fs.readFileSync(localPath, "utf8");
-    var str = "";
+    var remotePath = remoteCWD + '/testfile.txt';
+    var realContents = Fs.readFileSync(localPath, 'utf8');
+    var str = '';
     ftp.get(remotePath, function(err, socket) {
       assert.ok(!err, err);
-      assert.ok(arguments.length === 2);
-      socket.on("data", function(d) {
+      assert.strictEqual(arguments.length, 2);
+      socket.on('data', function(d) {
         str += d;
       })
-      socket.on("close", function(hadErr) {
+      socket.on('close', function(hadErr) {
         assert.equal(realContents, str);
         next();
       });
@@ -441,23 +444,23 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("test get a file and save it locally", function(next) {
-    var localPath = getLocalPath("testfile.txt");
-    var remotePath = getRemotePath("testfile.txt");
-    var destination = localPath + ".copy";
+  it('test get a file and save it locally', function(next) {
+    var localPath = getLocalPath('testfile.txt');
+    var remotePath = getRemotePath('testfile.txt');
+    var destination = localPath + '.copy';
     var onProgress = sinon.spy();
     ftp.on('progress', onProgress);
 
     Fs.unlink(destination, function() {
-      Fs.readFile(localPath, "utf8", function(err, realContents) {
+      Fs.readFile(localPath, 'utf8', function(err, realContents) {
         ftp.get(remotePath, destination, function(err) {
           assert.ok(!err, err);
           assert.ok(arguments.length < 2, arguments.length);
           var data = onProgress.args[0][0];
           assert.equal(data.filename, remotePath);
           assert.equal(data.action, 'get');
-          assert.ok(typeof data.transferred, 'number');
-          Fs.readFile(destination, "utf8", function(err, data) {
+          assert.strictEqual(typeof data.transferred, 'number');
+          Fs.readFile(destination, 'utf8', function(err, data) {
             assert.strictEqual(data, realContents);
             next();
           });
@@ -466,11 +469,11 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("test get a big file stream", function(next) {
-    var remotePath = getRemotePath("bigfile.test");
-    var localPath = getLocalPath("bigfile.test");
-    var data = (new Array(1 * 1024 * 1024)).join("x");
-    var buffer = new Buffer(data, "binary");
+  it('test get a big file stream', function(next) {
+    var remotePath = getRemotePath('bigfile.test');
+    var localPath = getLocalPath('bigfile.test');
+    var data = (new Array(1 * 1024 * 1024)).join('x');
+    var buffer = new Buffer(data, 'binary');
 
     Fs.writeFileSync(localPath, buffer);
 
@@ -496,9 +499,9 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("test put a big file stream", function(next) {
-    var remotePath = getRemotePath("bigfile.test");
-    var data = (new Array(1 * 1024 * 1024)).join("x");
+  it('test put a big file stream', function(next) {
+    var remotePath = getRemotePath('bigfile.test');
+    var data = (new Array(1 * 1024 * 1024)).join('x');
 
     ftp.getPutSocket(remotePath, function(err, socket) {
       assert.ok(!err, err);
@@ -517,23 +520,23 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("test put a big file stream fail", function(next) {
-    var remotePath = getRemotePath("/nonexisting/path/to/file.txt");
+  it('test put a big file stream fail', function(next) {
+    var remotePath = getRemotePath('/nonexisting/path/to/file.txt');
 
     ftp.getPutSocket(remotePath, function(err, socket, res) {
       assert.ok( !! err, err);
       assert.equal(err.code, 550, err);
     }, function(err, res) {
-      assert.ok( !! err);
+      assert.ok(!!err);
       next();
     });
   });
 
-  it("test get fileList array", function(next) {
-    var file1 = "testfile.txt";
+  it('test get fileList array', function(next) {
+    var file1 = 'testfile.txt';
 
     ftp.raw.cwd(getRemotePath(''), function() {
-      ftp.ls(".", function(err, res) {
+      ftp.ls('.', function(err, res) {
         assert.ok(!err, err);
         assert.ok(Array.isArray(res));
 
@@ -549,7 +552,7 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("test reconnect", function(next) {
+  it('test reconnect', function(next) {
     this.timeout(10000);
     ftp.raw.pwd(function(err, res) {
       if (err) throw err;
@@ -562,7 +565,7 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("test attach event handlers: connect", function(_next) {
+  it('test attach event handlers: connect', function(_next) {
     var clientOnConnect = function() {
       client.auth(FTPCredentials.user, FTPCredentials.pass, next);
     };
@@ -574,22 +577,22 @@ describe("jsftp test suite", function() {
     };
 
     var client = new Ftp({
-      host: "localhost",
-      user: "user",
+      host: 'localhost',
+      user: 'user',
       port: 3334,
-      pass: "12345"
+      pass: '12345'
     });
-    client.on("connect", clientOnConnect);
+    client.on('connect', clientOnConnect);
   });
 
-  it("test PASV streaming: Copy file using piping", function(next) {
-    var filePath = getRemotePath("testfile.txt");
-    var originalData = Fs.readFileSync(getLocalPath("testfile.txt"));
+  it('test PASV streaming: Copy file using piping', function(next) {
+    var filePath = getRemotePath('testfile.txt');
+    var originalData = Fs.readFileSync(getLocalPath('testfile.txt'));
     ftp.getGetSocket(filePath, function(err, readable) {
       assert(!err, err);
       assert.ok(readable);
 
-      readable.on("error", error);
+      readable.on('error', error);
 
       function error(err) {
         assert.ok(!err, err);
@@ -597,7 +600,7 @@ describe("jsftp test suite", function() {
         next();
       }
 
-      var remoteCopy = filePath + ".bak";
+      var remoteCopy = filePath + '.bak';
       ftp.getPutSocket(remoteCopy, function(err, socket) {
         assert.ok(!err, err);
         readable.pipe(socket);
@@ -607,14 +610,14 @@ describe("jsftp test suite", function() {
       function(hadError) {
         assert.ok(!hadError);
 
-        var str = "";
+        var str = '';
         ftp.getGetSocket(remoteCopy, function(err, socket) {
           assert.ok(!err, err);
-          socket.on("data", function(d) {
+          socket.on('data', function(d) {
             str += d;
           });
-          socket.on("close", function(hadErr) {
-            assert.equal(originalData.toString("utf8"), str);
+          socket.on('close', function(hadErr) {
+            assert.equal(originalData.toString('utf8'), str);
             next();
           });
           socket.resume();
@@ -623,10 +626,10 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("Test that streaming GET (RETR) retrieves a file properly", function(next) {
-    var path = getLocalPath("testfile.txt");
+  it('Test that streaming GET (RETR) retrieves a file properly', function(next) {
+    var path = getLocalPath('testfile.txt');
     var originalData = Fs.readFileSync(path);
-    ftp.getGetSocket(getRemotePath("testfile.txt"), function(err, readable) {
+    ftp.getGetSocket(getRemotePath('testfile.txt'), function(err, readable) {
       assert.ok(!err);
       var concatStream = concat(function(buffer) {
         assert.ok(!err);
@@ -642,28 +645,28 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("Test that streaming GET (RETR) fails when a file is not present", function(next) {
-    ftp.getGetSocket("unexisting/file/path", function(err, readable) {
+  it('Test that streaming GET (RETR) fails when a file is not present', function(next) {
+    ftp.getGetSocket('unexisting/file/path', function(err, readable) {
       assert.ok(err);
       assert.equal(550, err.code);
       next();
     });
   });
 
-  it("Test that streaming PUT (STOR) stores a file properly", function(next) {
-    var path = getLocalPath("testfile.txt");
-    var originalData = Fs.createReadStream(getLocalPath("testfile.txt"));
+  it('Test that streaming PUT (STOR) stores a file properly', function(next) {
+    var path = getLocalPath('testfile.txt');
+    var originalData = Fs.createReadStream(getLocalPath('testfile.txt'));
     originalData.pause();
 
-    ftp.getPutSocket(getRemotePath("testfile.txt.bak"), function(err, socket) {
+    ftp.getPutSocket(getRemotePath('testfile.txt.bak'), function(err, socket) {
       assert.ok(!err);
       originalData.pipe(socket);
       originalData.resume();
 
       var concatStream = concat(function(buffer) {
         assert.ok(!err);
-        Fs.readFile(path, "utf8", function(err, original) {
-          assert.equal(buffer.toString("utf8"), original);
+        Fs.readFile(path, 'utf8', function(err, original) {
+          assert.equal(buffer.toString('utf8'), original);
           next();
         });
       });
@@ -676,21 +679,21 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("Test that streaming PUT (STOR) fails when a file is not present", function(next) {
-    ftp.getPutSocket("unexisting/file/path", function(err, socket) {
+  it('Test that streaming PUT (STOR) fails when a file is not present', function(next) {
+    ftp.getPutSocket('unexisting/file/path', function(err, socket) {
       assert.ok(err);
       next();
     });
   });
 
-  it("Test that onConnect is called", function(next) {
+  it('Test that onConnect is called', function(next) {
     var ftp2 = new Ftp(FTPCredentials);
-    ftp2.on("connect", function() {
+    ftp2.on('connect', function() {
       next();
     });
   });
 
-  it("Test for correct data on ls 1", function(next) {
+  it('Test for correct data on ls 1', function(next) {
     var paths = ['test/test_c9/testfile.txt', 'work/test/main.css'];
     ftp.auth(FTPCredentials.user, FTPCredentials.pass, function(err, data) {
       if (err) return console.log(err);
@@ -704,36 +707,38 @@ describe("jsftp test suite", function() {
       });
 
       ftp.ls(paths[1], function showFile(err, res1) {
-        assert.ok( !! err);
+        assert.ok(!!err);
         processed += 1;
         if (processed === 2) next();
       });
     });
   });
 
-  it("Test raw method with PWD", function(next) {
+  it('Test raw method with PWD', function(next) {
     ftp.raw('pwd', function(err, res) {
       assert(!err, err);
 
       var code = parseInt(res.code, 10);
-      assert.ok(code === 257, "Raw PWD command was not successful: " + res.text);
+      assert.ok(code === 257,
+                'Raw PWD command was not successful: ' + res.text);
 
       next();
     });
   });
 
-  it("Test raw method with HELP", function(next) {
+  it('Test raw method with HELP', function(next) {
     ftp.raw('help', function(err, res) {
       assert(!err, err);
 
       var code = parseInt(res.code, 10);
-      assert.ok(code === 214, "Raw HELP command was not successful: " + res.text);
+      assert.ok(code === 214,
+                'Raw HELP command was not successful: ' + res.text);
 
       next();
     });
   });
 
-  it("Test keep-alive with NOOP", function(next) {
+  it('Test keep-alive with NOOP', function(next) {
     this.timeout(10000);
     ftp.keepAlive();
     ftp.keepAlive(1000);
@@ -743,9 +748,9 @@ describe("jsftp test suite", function() {
     }, 5000);
   });
 
-  it.skip("Test handling error on simultaneous PASV requests {#90}", function(next) {
-    var file1 = remoteCWD + "/testfile.txt";
-    var file2 = remoteCWD + "/testfile2.txt";
+  it.skip('Test handling error on simultaneous PASV requests {#90}', function(next) {
+    var file1 = remoteCWD + '/testfile.txt';
+    var file2 = remoteCWD + '/testfile2.txt';
 
     var counter = 0;
     var args = [];
@@ -771,7 +776,7 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("test set binary type", function(next) {
+  it('test set binary type', function(next) {
     ftp.setType('I', function(err, res) {
       assert.ok(!err);
       assert.equal(ftp.type, 'I');
