/* global FTP_PORT */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Rx = require('rx');
var fromFtpSocket = require('fromFtpSocket');

var Ftp = (function () {
  function Ftp(options) {
    _classCallCheck(this, Ftp);

    var port = this.port = options.port || FTP_PORT;
    var host = this.host = options.host;

    var connector = options.connector || fromFtpSocket;
    this.connect(connector(host, port));
  }

  _createClass(Ftp, [{
    key: 'connect',
    value: function connect(host, port) {
      this.socket = Net.createConnection(port, host);;

      this.requests$ = Rx.Observable.fromStream(socket);
      //this.responses$ = Rx.Observable.create(...);
    }
  }]);

  return Ftp;
})();